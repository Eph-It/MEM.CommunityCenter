@using CommunityCenter.CM.DB
@using Microsoft.EntityFrameworkCore
@using CommunityCenter.CM.DB.Models
@using MatBlazor
@using Microsoft. 
@typeparam TItem

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject CMDBContext dbContext

<MatBlazor.MatSnackbar @bind-IsOpen="@snackBarIsOpen">
    <MatBlazor.MatSnackbarContent>Loading data...</MatBlazor.MatSnackbarContent>

</MatBlazor.MatSnackbar>

@if (res != null)
{
    <table>
        <MatBlazor.MatSortHeaderRow SortChanged="@SortData">

        </MatBlazor.MatSortHeaderRow>
    </table>

    <MatBlazor.MatTable Items="@res" RowClass="tester" ShowFooter="false" Striped="true" ShowPaging="false" PageSize="@pageSize">
        <MatTableHeader>
            <th>Name</th>
        </MatTableHeader>
        <MatTableRow>
            <td>@context.Name</td>
        </MatTableRow>
    </MatBlazor.MatTable>
    <MatBlazor.MatPaginator Length="@pageLength" PageSize="@pageSize" Page="@OnPageAsync"></MatBlazor.MatPaginator>
}


@code {
    [Parameter]
    public Type RBACType { get; set; }

    int pageLength = 10;
    int pageSize = 10;
    bool snackBarIsOpen = false;
    protected TItem[] res = null;

    protected override async Task OnInitializedAsync()
    {
        pageLength = dbContext.GetRBACResults<TItem>().Count();
        res = await dbContext.GetRBACResults<TItem>().OrderBy("MachineID").Take(pageSize).ToArrayAsync();
        snackBarIsOpen = false;
    }
    protected async Task OnPageAsync(MatPaginatorPageEvent e)
    {
        snackBarIsOpen = true;
        pageSize = e.PageSize;
        res = await dbContext.GetRBACResults<TItem>().OrderBy(p => p.MachineID).Skip(e.PageSize * e.PageIndex).Take(pageSize).ToArrayAsync();
        snackBarIsOpen = false;
    }
    void SortData(MatSortChangedEvent sort)
    {
    }
}
